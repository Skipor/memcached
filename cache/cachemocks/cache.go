package cachemocks

import (
	"github.com/stretchr/testify/mock"

	"github.com/Skipor/memcached/cache"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (c *Cache) Delete(key []byte) bool {
	ret := c.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (c *Cache) Get(key ...[]byte) []cache.ItemView {
	ret := c.Called(key)

	var r0 []cache.ItemView
	if rf, ok := ret.Get(0).(func(...[]byte) []cache.ItemView); ok {
		r0 = rf(key...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.ItemView)
		}
	}

	return r0
}

func (c *Cache) Touch(key ...[]byte) { c.Called(key) }
func (c *Cache) Set(i cache.Item)    { c.Called(i) }

func (c *Cache) Lock()    { c.Called() }
func (c *Cache) Unlock()  { c.Called() }
func (c *Cache) RLock()   { c.Called() }
func (c *Cache) RUnlock() { c.Called() }

func (c *Cache) NewGetter(rawCommand []byte) cache.Getter   { return c }
func (c *Cache) NewSetter(rawCommand []byte) cache.Setter   { return c }
func (c *Cache) NewDeleter(rawCommand []byte) cache.Deleter { return c }

var _ cache.Cache = (*Cache)(nil)
var _ cache.View = (*Cache)(nil)
var _ cache.RWCache = (*Cache)(nil)
